
/*
	Note: This file is autogenerated! Do not edit it manually!
	Edit client_kernel_template.go instead, and run
	hack/generate-client.sh afterwards.
*/

package client

import (
	"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha1"
	ignitemeta "github.com/weaveworks/ignite/pkg/apis/meta/v1alpha1"
	"github.com/weaveworks/ignite/pkg/storage"
)

// KernelClient is an interface for accessing Kernel-specific API objects
type KernelClient interface {
	storage.Cache

	// Get returns a Kernel object based on a reference string; which can either
	// match the Kernel's Name or UID, or be a prefix of the UID
	Get(ref string) (*v1alpha1.Kernel, error)
	// Set saves a Kernel into the persistent storage
	Set(kernel *v1alpha1.Kernel) error
	// Delete deletes the API object from the storage
	Delete(uid string) error
	// List returns a list of all Kernels available
	List() ([]*v1alpha1.Kernel, error)
}

// Kernels returns the KernelClient for the Client instance
func (c *Client) Kernels() KernelClient {
	if c.kernelClient == nil {
		c.kernelClient = newKernelClient(c.storage)
	}
	return c.kernelClient
}

// Kernels is a shorthand for accessing Kernels using the default client
func Kernels() KernelClient {
	return DefaultClient.Kernels()
}

// kernelClient is a struct implementing the KernelClient interface
// It uses a shared storage instance passed from the Client
type kernelClient struct {
	storage.Cache
	storage storage.Storage
}

// newKernelClient builds the kernelClient struct using the storage implementation
// It automatically fetches all metadata for all API types of the specific kind into the cache
func newKernelClient(s storage.Storage) KernelClient {
	c, err := s.GetCache(v1alpha1.KernelKind)
	if err != nil {
		panic(err)
	}
	return &kernelClient{storage: s, Cache: c}
}

// Get returns a Kernel object based on a reference string; which can either
// match the Kernel's Name or UID, or be a prefix of the UID
func (c *kernelClient) Get(ref string) (*v1alpha1.Kernel, error) {
	ob := ignitemeta.ObjectMeta{}
	ob.SetUID(ref)
	kernel := &v1alpha1.Kernel{
		ObjectMeta: ob,
	}
	if err := c.storage.Get(kernel); err != nil {
		return nil, err
	}
	return kernel, nil
}

// Set saves a Kernel into the persistent storage
func (c *kernelClient) Set(kernel *v1alpha1.Kernel) error {
	return c.storage.Set(kernel)
}

// Delete deletes the API object from the storage
func (c *kernelClient) Delete(uid string) error {
	return c.storage.Delete(v1alpha1.KernelKind, uid)
}

// List returns a list of all Kernels available
func (c *kernelClient) List() ([]*v1alpha1.Kernel, error) {
	list, err := c.storage.List(v1alpha1.KernelKind)
	if err != nil {
		return nil, err
	}
	result := []*v1alpha1.Kernel{}
	for _, item := range list {
		result = append(result, item.(*v1alpha1.Kernel))
	}
	return result, nil
}
