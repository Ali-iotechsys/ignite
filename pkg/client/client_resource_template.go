// +build ignore

/*
	Note: This file is autogenerated! Do not edit it manually!
	Edit client_resource_template.go instead, and run
	hack/generate-client.sh afterwards.
*/

package client

import (
	"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha1"
	"github.com/weaveworks/ignite/pkg/storage"
)

// ResourceClient is an interface for accessing Resource-specific API objects
type ResourceClient interface {
	storage.Cache

	// Get returns a Resource object based on a reference string; which can either
	// match the Resource's Name or UID, or be a prefix of the UID
	Get(ref string) (*v1alpha1.Resource, error)
	// Set saves a Resource into the persistent storage
	Set(resource *v1alpha1.Resource) error
	// Delete deletes the API object from the storage
	Delete(uid string) error
	// List returns a list of all Resources available
	List() ([]*v1alpha1.Resource, error)
}

// Resources returns the ResourceClient for the Client instance
func (c *Client) Resources() ResourceClient {
	if c.resourceClient == nil {
		c.resourceClient = newResourceClient(c.storage)
	}
	return c.resourceClient
}

// Resources is a shorthand for accessing Resources using the default client
func Resources() ResourceClient {
	return DefaultClient.Resources()
}

// resourceClient is a struct implementing the ResourceClient interface
// It uses a shared storage instance passed from the Client
type resourceClient struct {
	storage.Cache
	storage storage.Storage
}

// newResourceClient builds the resourceClient struct using the storage implementation
// It automatically fetches all metadata for all API types of the specific kind into the cache
func newResourceClient(s storage.Storage) ResourceClient {
	c, err := s.GetCache(v1alpha1.ResourceKind)
	if err != nil {
		panic(err)
	}
	return &resourceClient{storage: s, Cache: c}
}

// Get returns a Resource object based on a reference string; which can either
// match the Resource's Name or UID, or be a prefix of the UID
func (c *resourceClient) Get(ref string) (*v1alpha1.Resource, error) {
	meta, err := c.MatchOne(ref)
	if err != nil {
		return nil, err
	}
	resource := &v1alpha1.Resource{ObjectMeta: meta.ObjectMeta}
	if err := c.storage.Get(resource); err != nil {
		return nil, err
	}
	return resource, nil
}

// Set saves a Resource into the persistent storage
func (c *resourceClient) Set(resource *v1alpha1.Resource) error {
	return c.storage.Set(resource)
}

// Delete deletes the API object from the storage
func (c *resourceClient) Delete(uid string) error {
	return c.storage.Delete(v1alpha1.ResourceKind, uid)
}

// List returns a list of all Resources available
func (c *resourceClient) List() ([]*v1alpha1.Resource, error) {
	list, err := c.storage.List(v1alpha1.ResourceKind)
	if err != nil {
		return nil, err
	}
	result := []*v1alpha1.Resource{}
	for _, item := range list {
		result = append(result, item.(*v1alpha1.Resource))
	}
	return result, nil
}
