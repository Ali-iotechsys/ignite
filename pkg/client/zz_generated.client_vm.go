
/*
	Note: This file is autogenerated! Do not edit it manually!
	Edit client_vm_template.go instead, and run
	hack/generate-client.sh afterwards.
*/

package client

import (
	api "github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha1"
	meta "github.com/weaveworks/ignite/pkg/apis/meta/v1alpha1"
	"github.com/weaveworks/ignite/pkg/storage"
)

// VMClient is an interface for accessing VM-specific API objects
type VMClient interface {
	storage.Cache

	// Get returns a VM object based on a reference string; which can either
	// match the VM's Name or UID, or be a prefix of the UID
	Get(ref string) (*api.VM, error)
	// Set saves a VM into the persistent storage
	Set(vm *api.VM) error
	// Delete deletes the API object from the storage
	Delete(uid string) error
	// List returns a list of all VMs available
	List() ([]*api.VM, error)
}

// VMs returns the VMClient for the Client instance
func (c *Client) VMs() VMClient {
	if c.vmClient == nil {
		c.vmClient = newVMClient(c.storage)
	}
	return c.vmClient
}

// VMs is a shorthand for accessing VMs using the default client
func VMs() VMClient {
	return DefaultClient.VMs()
}

// vmClient is a struct implementing the VMClient interface
// It uses a shared storage instance passed from the Client
type vmClient struct {
	storage.Cache
	storage storage.Storage
}

// newVMClient builds the vmClient struct using the storage implementation
// It automatically fetches all metadata for all API types of the specific kind into the cache
func newVMClient(s storage.Storage) VMClient {
	c, err := s.GetCache(api.VMKind)
	if err != nil {
		panic(err)
	}
	return &vmClient{storage: s, Cache: c}
}

// Get returns a VM object based on a reference string; which can either
// match the VM's Name or UID, or be a prefix of the UID
func (c *vmClient) Get(ref string) (*api.VM, error) {
	ob := meta.ObjectMeta{}
	ob.SetUID(ref)
	vm := &api.VM{
		ObjectMeta: ob,
	}
	if err := c.storage.Get(vm); err != nil {
		return nil, err
	}
	return vm, nil
}

// Set saves a VM into the persistent storage
func (c *vmClient) Set(vm *api.VM) error {
	return c.storage.Set(vm)
}

// Delete deletes the API object from the storage
func (c *vmClient) Delete(uid string) error {
	return c.storage.Delete(api.VMKind, uid)
}

// List returns a list of all VMs available
func (c *vmClient) List() ([]*api.VM, error) {
	list, err := c.storage.List(api.VMKind)
	if err != nil {
		return nil, err
	}
	result := []*api.VM{}
	for _, item := range list {
		result = append(result, item.(*api.VM))
	}
	return result, nil
}
